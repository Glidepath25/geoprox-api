diff --git a/frontend/app/permits.tsx b/frontend/app/permits.tsx
index 3afb959..f4e18d7 100644
--- a/frontend/app/permits.tsx
+++ b/frontend/app/permits.tsx
@@ -262,20 +262,17 @@ export default function PermitsScreen() {
         <View style={styles.detailRow}>
           <Ionicons name="beaker" size={16} color="#6b7280" />
           <Text style={styles.detailText}>Sample Status: </Text>
-          <View style={styles.statusContainer}>
-            {item.sample_status === 'not_required' && (
-              <Text style={styles.statusNotRequired}>Not Required</Text>
-            )}
-            {item.sample_status === 'pending_sample' && (
-              <Text style={styles.statusPendingSample}>Pending Sample</Text>
-            )}
-            {item.sample_status === 'wip' && (
-              <Text style={styles.statusWip}>WIP</Text>
-            )}
-            {item.sample_status === 'completed' && (
-              <Text style={styles.statusCompleted}>Complete</Text>
-            )}
-          </View>
+          <Text style={[styles.statusWip, { 
+            color: item.sample_status === 'Completed' ? '#10b981' : 
+                   item.sample_status === 'In progress' ? '#f59e0b' : '#6b7280' 
+          }]}>
+            {item.sample_status}
+          </Text>
+        </View>
+
+        <View style={styles.detailRow}>
+          <Ionicons name="chevron-forward" size={20} color="#9ca3af" />
+          <Text style={styles.detailText}>Tap for details</Text>
         </View>
       </View>
       
diff --git a/model.patch b/model.patch
index 0b2407d..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,306 +0,0 @@
-diff --git a/model.patch b/model.patch
-index 4967726..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,107 +0,0 @@
--diff --git a/test_result.md b/test_result.md
--index 187cba4..611ee88 100644
----- a/test_result.md
--+++ b/test_result.md
--@@ -100,4 +100,99 @@
-- 
-- #====================================================================================================
-- # Testing Data - Main Agent and testing sub agent both should log testing data below this section
---#====================================================================================================
--\ No newline at end of file
--+#====================================================================================================
--+
--+user_problem_statement: "Test the GeoProx Mobile API backend that I just created. The backend includes authentication system, permits management, and site inspections functionality."
--+
--+backend:
--+  - task: "Authentication System - User Login"
--+    implemented: true
--+    working: true
--+    file: "backend/server.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "‚úÖ Login functionality working perfectly. Tested with sample users john.smith/password123 and sarah.jones/password123. JWT tokens generated correctly. Invalid credentials properly rejected with 401 status."
--+
--+  - task: "Permits Management - Get User Permits"
--+    implemented: true
--+    working: true
--+    file: "backend/server.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "‚úÖ Permits retrieval working correctly. Retrieved 2 sample permits with all required fields (id, permit_number, utility_type, works_type, location, address, highway_authority, status). Authentication properly enforced - unauthenticated requests correctly rejected with 403."
--+
--+  - task: "Permits Management - Get Specific Permit"
--+    implemented: true
--+    working: true
--+    file: "backend/server.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "‚úÖ Individual permit retrieval working correctly. Successfully retrieved specific permit by ID. Non-existent permits properly return 404 status. User authorization properly enforced."
--+
--+  - task: "Site Inspections - Create Inspection"
--+    implemented: true
--+    working: true
--+    file: "backend/server.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "‚úÖ Inspection creation working perfectly. Successfully created inspection with all required fields including questionnaire responses (q1-q7), assessment results (bituminous_result, sub_base_result), and metadata. Proper validation for invalid permit IDs (returns 404)."
--+
--+  - task: "Site Inspections - Get Inspections"
--+    implemented: true
--+    working: true
--+    file: "backend/server.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "‚úÖ Inspection retrieval working correctly. Successfully retrieved inspections for a specific permit. Returns proper list format. Authentication and permit ownership properly enforced."
--+
--+  - task: "Database Models and JWT Authentication"
--+    implemented: true
--+    working: true
--+    file: "backend/server.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "‚úÖ Database models (Users, Permits, SiteInspections) working correctly with MongoDB. JWT token authentication properly implemented with 24-hour expiration. Sample data initialization working. UUID-based IDs properly implemented."
--+
--+frontend:
--+  # No frontend tasks to test as per instructions
--+
--+metadata:
--+  created_by: "testing_agent"
--+  version: "1.0"
--+  test_sequence: 1
--+  run_ui: false
--+
--+test_plan:
--+  current_focus:
--+    - "All backend tasks completed and tested successfully"
--+  stuck_tasks: []
--+  test_all: false
--+  test_priority: "high_first"
--+
--+agent_communication:
--+  - agent: "testing"
--+    message: "üéâ COMPLETE SUCCESS: All GeoProx Mobile API backend functionality tested and working perfectly. Comprehensive testing completed covering authentication (login/logout), permits management (get all/get specific), site inspections (create/retrieve), error handling (401/403/404), and data validation. All 10 test cases passed with 100% success rate. Backend API is production-ready. Sample users and permits are properly initialized. JWT authentication working correctly. MongoDB integration successful."
--\ No newline at end of file
-diff --git a/test_result.md b/test_result.md
-index 771334d..488c63b 100644
---- a/test_result.md
-+++ b/test_result.md
-@@ -107,15 +107,18 @@ user_problem_statement: "Test the GeoProx Mobile API backend that I just created
- backend:
-   - task: "GeoProx Production Authentication - Mobile JWT Login"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/mobile/auth/login created for production GeoProx PostgreSQL authentication. Uses JWT tokens and bcrypt password verification. Credentials: EXPOTEST / EXPOTEST!! - NEEDS TESTING"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå CRITICAL INFRASTRUCTURE ISSUE: Production PostgreSQL database connection timeout. AWS RDS instance 'geoprox-serverless-instance-1.c3ooeicas6w8.eu-west-1.rds.amazonaws.com:5432' is not accessible from this testing environment. Error: 'connection to server failed: Connection timed out'. This is likely due to VPC security group restrictions that prevent external access. All GeoProx production endpoints are failing due to database connectivity issues."
- 
-   - task: "Authentication System - User Login (MongoDB - Legacy)"
-     implemented: true
-@@ -191,75 +194,93 @@ backend:
- 
-   - task: "GeoProx Permits - Get User Permits (Production)"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/geoprox/permits created to fetch permits from production PostgreSQL permit_records table. Includes search functionality and converts data to mobile format. - NEEDS TESTING with EXPOTEST user"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå BLOCKED: Cannot test due to production PostgreSQL database connectivity issue. Same infrastructure problem as authentication endpoint."
- 
-   - task: "GeoProx Permit Details - Get Specific Permit (Production)"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/geoprox/permits/{permit_ref} created to fetch specific permit details from production database. Returns permit with inspection and sample status. - NEEDS TESTING"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå BLOCKED: Cannot test due to production PostgreSQL database connectivity issue. Same infrastructure problem as authentication endpoint."
- 
-   - task: "GeoProx Site Inspection - Save Draft (Production)"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/geoprox/inspections/save created to save inspection drafts to production permit_records.site_payload. Updates site_status to 'wip'. - NEEDS TESTING"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå BLOCKED: Cannot test due to production PostgreSQL database connectivity issue. Same infrastructure problem as authentication endpoint."
- 
-   - task: "GeoProx Site Inspection - Submit Final (Production)"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/geoprox/inspections/submit created to submit final inspections to production permit_records.site_payload. Updates site_status to 'completed'. - NEEDS TESTING"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå BLOCKED: Cannot test due to production PostgreSQL database connectivity issue. Same infrastructure problem as authentication endpoint."
- 
-   - task: "GeoProx Sample Testing - Save Draft (Production)"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/geoprox/sample-testing/save created to save sample testing drafts to production permit_records.sample_payload. Updates sample_status to 'wip'. - NEEDS TESTING"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå BLOCKED: Cannot test due to production PostgreSQL database connectivity issue. Same infrastructure problem as authentication endpoint."
- 
-   - task: "GeoProx Sample Testing - Submit Final (Production)"
-     implemented: true
--    working: "NA"
-+    working: false
-     file: "backend/server.py, backend/geoprox_integration.py"
--    stuck_count: 0
-+    stuck_count: 1
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: "NA"
-         agent: "main"
-         comment: "New endpoint /api/geoprox/sample-testing/submit created to submit final sample testing to production permit_records.sample_payload. Updates sample_status to 'completed'. - NEEDS TESTING"
-+      - working: false
-+        agent: "testing"
-+        comment: "‚ùå BLOCKED: Cannot test due to production PostgreSQL database connectivity issue. Same infrastructure problem as authentication endpoint."
- 
- frontend:
-   # No frontend tasks to test as per instructions
-@@ -271,7 +292,8 @@ metadata:
-   run_ui: false
- 
- test_plan:
--  current_focus:
-+  current_focus: []
-+  stuck_tasks:
-     - "GeoProx Production Authentication - Mobile JWT Login"
-     - "GeoProx Permits - Get User Permits (Production)"
-     - "GeoProx Permit Details - Get Specific Permit (Production)"
-@@ -279,7 +301,6 @@ test_plan:
-     - "GeoProx Site Inspection - Submit Final (Production)"
-     - "GeoProx Sample Testing - Save Draft (Production)"
-     - "GeoProx Sample Testing - Submit Final (Production)"
--  stuck_tasks: []
-   test_all: false
-   test_priority: "high_first"
- 
-@@ -296,4 +317,34 @@ agent_communication:
-     - Inspection Save/Submit: Changed to /api/geoprox/inspections/save and /api/geoprox/inspections/submit
-     - Sample Testing Save/Submit: Changed to /api/geoprox/sample-testing/save and /api/geoprox/sample-testing/submit
-     
--    All frontend screens now point to production GeoProx PostgreSQL database. Ready for testing with credentials: EXPOTEST / EXPOTEST!!"
-\ No newline at end of file
-+    All frontend screens now point to production GeoProx PostgreSQL database. Ready for testing with credentials: EXPOTEST / EXPOTEST!!"
-+  - agent: "testing"
-+    message: "‚ùå CRITICAL INFRASTRUCTURE ISSUE: All GeoProx production integration endpoints are BLOCKED due to AWS RDS PostgreSQL database connectivity failure. 
-+    
-+    üîç DETAILED ANALYSIS:
-+    - Database: geoprox-serverless-instance-1.c3ooeicas6w8.eu-west-1.rds.amazonaws.com:5432
-+    - Error: 'connection to server failed: Connection timed out'
-+    - Root Cause: AWS VPC security group restrictions preventing external access
-+    - Impact: ALL 7 production endpoints cannot be tested (authentication, permits, inspections, sample testing)
-+    
-+    üìã TESTED ENDPOINTS (All Failed):
-+    ‚ùå POST /api/mobile/auth/login - 500 Internal Server Error (DB timeout)
-+    ‚ùå GET /api/geoprox/permits - 401 Unauthorized (no valid token due to auth failure)
-+    ‚ùå GET /api/geoprox/permits/{permit_ref} - Cannot test (no auth token)
-+    ‚ùå POST /api/geoprox/inspections/save - Cannot test (no auth token)
-+    ‚ùå POST /api/geoprox/inspections/submit - Cannot test (no auth token)
-+    ‚ùå POST /api/geoprox/sample-testing/save - Cannot test (no auth token)
-+    ‚ùå POST /api/geoprox/sample-testing/submit - Cannot test (no auth token)
-+    
-+    üõ†Ô∏è INFRASTRUCTURE REQUIREMENTS:
-+    1. AWS RDS security group must allow inbound TCP port 5432 from testing environment IP
-+    2. RDS instance must be configured as 'Publicly Accessible' if external access is required
-+    3. Alternative: Set up VPN/bastion host for secure database access
-+    
-+    ‚úÖ WORKING COMPONENTS:
-+    - Backend server is running and responding (‚úÖ GET /api/ returns 200)
-+    - GeoProx integration code is properly implemented
-+    - All endpoint routes are correctly configured
-+    - Legacy MongoDB endpoints continue to work perfectly
-+    
-+    üö® RECOMMENDATION: This is an AWS infrastructure configuration issue that requires DevOps/Infrastructure team intervention to resolve database connectivity before production testing can proceed."
-\ No newline at end of file
